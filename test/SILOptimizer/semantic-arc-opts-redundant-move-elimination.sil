// RUN: %target-sil-opt -module-name Swift -enable-sil-verify-all -semantic-arc-opts -sil-semantic-arc-redundant-move-value-elim %s | %FileCheck %s

sil_stage canonical

import Builtin

class C {}

enum FakeOptional<T> {
case none
case some(T)
}

sil @getOwned : $@convention(thin) () -> (@owned C)

sil @borrow : $@convention(thin) (@guaranteed C) -> ()

sil @useUnmanaged : $@convention(thin) (@sil_unmanaged C) -> ()

// Test that move_value instructions are removed when they are "redundant".  A
// move_value instruction is redundant when the lifetime it introduces has the
// same characteristics as the lifetime that it ends along in the following two
// aspects:
// - lexicaliity
// - escapingness

// The tests are named as follows:
//
// @test_{old_characteristics}_{new_characteristics}
// where both old_characteristics and new_characteristics are of the form
//
// {is_lexical}{has_escaping_use}
//
// and both is_lexical and has_escaping_use are 1 or 0 depending on whether each
// is true.
//
// So for example, in @test_00_10, there is a move_value instruction which ends
// a lifetime that is both neither lexical nor escaping and begins a lifetime
// which is lexical but not escaping.  Since the characteristics of the old and
// new lifetimes differ, the move_value should be preserved.

// Note that these tests all have two move_values.  That's just to make it a bit
// easier to specify the characteristics of the first lifetime.  The move_value
// of real interest for the tests is the second.

// Old: lexical    , non-escaping
// New: lexical    , non-escaping
// Same.  Redundant.  Remove move_value.
//
// CHECK-LABEL: sil [ossa] @test_10_10 : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = apply
// CHECK:         [[LIFETIME:%[^,]+]] = move_value [lexical] [[INSTANCE]]
// CHECK-NOT:     move_value
// CHECK-LABEL: } // end sil function 'test_10_10'
sil [ossa] @test_10_10 : $@convention(thin) () -> () {
  %getOwned = function_ref @getOwned : $@convention(thin) () -> (@owned C)
  %borrow = function_ref @borrow : $@convention(thin) (@guaranteed C) -> ()
  %instance = apply %getOwned() : $@convention(thin) () -> (@owned C)
  %lifetime = move_value [lexical] %instance : $C
  apply %borrow(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  %lifetime2 = move_value [lexical] %lifetime : $C
  apply %borrow(%lifetime2) : $@convention(thin) (@guaranteed C) -> ()
  destroy_value %lifetime2 : $C
  %retval = tuple ()
  return %retval : $()
}

// Old: lexical    , non-escaping
// New: non-lexical, non-escaping
// Different.  Non-redundant.  Keep move_value.
//
// CHECK-LABEL: sil [ossa] @test_10_00 : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = apply
// CHECK:         [[LIFETIME:%[^,]+]] = move_value [lexical] [[INSTANCE]]
// CHECK:         move_value [[LIFETIME]]
// CHECK-LABEL: } // end sil function 'test_10_00'
sil [ossa] @test_10_00 : $@convention(thin) () -> () {
  %getOwned = function_ref @getOwned : $@convention(thin) () -> (@owned C)
  %borrow = function_ref @borrow : $@convention(thin) (@guaranteed C) -> ()
  %instance = apply %getOwned() : $@convention(thin) () -> (@owned C)
  %lifetime = move_value [lexical] %instance : $C
  apply %borrow(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  %lifetime2 = move_value %lifetime : $C
  apply %borrow(%lifetime2) : $@convention(thin) (@guaranteed C) -> ()
  destroy_value %lifetime2 : $C
  %retval = tuple ()
  return %retval : $()
}

// Old: non-lexical, non-escaping
// New: lexical    , non-escaping
// Different.  Non-redundant.  Keep move_value.
//
// CHECK-LABEL: sil [ossa] @test_00_10 : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = apply
// CHECK:         move_value [lexical] [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'test_00_10'
sil [ossa] @test_00_10 : $@convention(thin) () -> () {
  %getOwned = function_ref @getOwned : $@convention(thin) () -> (@owned C)
  %borrow = function_ref @borrow : $@convention(thin) (@guaranteed C) -> ()
  %instance = apply %getOwned() : $@convention(thin) () -> (@owned C)
  apply %borrow(%instance) : $@convention(thin) (@guaranteed C) -> ()
  %lifetime2 = move_value [lexical] %instance : $C
  apply %borrow(%lifetime2) : $@convention(thin) (@guaranteed C) -> ()
  destroy_value %lifetime2 : $C
  %retval = tuple ()
  return %retval : $()
}

// Old: non-lexical, non-escaping
// New: non-lexical, non-escaping
// Same.  Redundant.  Remove move_value.
//
// CHECK-LABEL: sil [ossa] @test_00_00 : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = apply
// CHECK-NOT:     move_value
// CHECK-LABEL: } // end sil function 'test_00_00'
sil [ossa] @test_00_00 : $@convention(thin) () -> () {
  %getOwned = function_ref @getOwned : $@convention(thin) () -> (@owned C)
  %borrow = function_ref @borrow : $@convention(thin) (@guaranteed C) -> ()
  %instance = apply %getOwned() : $@convention(thin) () -> (@owned C)
  apply %borrow(%instance) : $@convention(thin) (@guaranteed C) -> ()
  %lifetime2 = move_value %instance : $C
  apply %borrow(%lifetime2) : $@convention(thin) (@guaranteed C) -> ()
  destroy_value %lifetime2 : $C
  %retval = tuple ()
  return %retval : $()
}

// Old: lexical    , escaping
// New: lexical    , escaping
// Same.  Redundant.  Remove move_value.
//
// CHECK-LABEL: sil [ossa] @test_11_11 : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = apply
// CHECK:         move_value [lexical] [[INSTANCE]]
// CHECK-NOT:     move_value
// CHECK-LABEL: } // end sil function 'test_11_11'
sil [ossa] @test_11_11 : $@convention(thin) () -> () {
  %getOwned = function_ref @getOwned : $@convention(thin) () -> (@owned C)
  %borrow = function_ref @borrow : $@convention(thin) (@guaranteed C) -> ()
  %useUnmanaged = function_ref @useUnmanaged : $@convention(thin) (@sil_unmanaged C) -> ()
  %instance = apply %getOwned() : $@convention(thin) () -> (@owned C)
  %lifetime = move_value [lexical] %instance : $C
  %escape = ref_to_unmanaged %lifetime : $C to $@sil_unmanaged C
  apply %useUnmanaged(%escape) : $@convention(thin) (@sil_unmanaged C) -> ()
  apply %borrow(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  %lifetime2 = move_value [lexical] %lifetime : $C
  %escape2 = ref_to_unmanaged %lifetime2 : $C to $@sil_unmanaged C
  apply %useUnmanaged(%escape2) : $@convention(thin) (@sil_unmanaged C) -> ()
  apply %borrow(%lifetime2) : $@convention(thin) (@guaranteed C) -> ()
  destroy_value %lifetime2 : $C
  %retval = tuple ()
  return %retval : $()
}

// Old: lexical    , escaping
// New: lexical    , non-escaping
// Different.  Non-redundant.  Keep move_value.
//
// CHECK-LABEL: sil [ossa] @test_11_10 : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = apply
// CHECK:         [[LIFETIME:%[^,]+]] = move_value [lexical] [[INSTANCE]]
// CHECK:         move_value [lexical] [[LIFETIME]]
// CHECK-LABEL: } // end sil function 'test_11_10'
sil [ossa] @test_11_10 : $@convention(thin) () -> () {
  %getOwned = function_ref @getOwned : $@convention(thin) () -> (@owned C)
  %borrow = function_ref @borrow : $@convention(thin) (@guaranteed C) -> ()
  %useUnmanaged = function_ref @useUnmanaged : $@convention(thin) (@sil_unmanaged C) -> ()
  %instance = apply %getOwned() : $@convention(thin) () -> (@owned C)
  %lifetime = move_value [lexical] %instance : $C
  %escape = ref_to_unmanaged %lifetime : $C to $@sil_unmanaged C
  apply %useUnmanaged(%escape) : $@convention(thin) (@sil_unmanaged C) -> ()
  apply %borrow(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  %lifetime2 = move_value [lexical] %lifetime : $C
  apply %borrow(%lifetime2) : $@convention(thin) (@guaranteed C) -> ()
  destroy_value %lifetime2 : $C
  %retval = tuple ()
  return %retval : $()
}

// Old: lexical    , non-escaping
// New: lexical    , escaping
// Different.  Non-redundant.  Keep move_value.
//
// CHECK-LABEL: sil [ossa] @test_10_11 : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = apply
// CHECK:         [[LIFETIME:%[^,]+]] = move_value [lexical] [[INSTANCE]]
// CHECK:         move_value [lexical] [[LIFETIME]]
// CHECK-LABEL: } // end sil function 'test_10_11'
sil [ossa] @test_10_11 : $@convention(thin) () -> () {
  %getOwned = function_ref @getOwned : $@convention(thin) () -> (@owned C)
  %borrow = function_ref @borrow : $@convention(thin) (@guaranteed C) -> ()
  %useUnmanaged = function_ref @useUnmanaged : $@convention(thin) (@sil_unmanaged C) -> ()
  %instance = apply %getOwned() : $@convention(thin) () -> (@owned C)
  %lifetime = move_value [lexical] %instance : $C
  apply %borrow(%lifetime) : $@convention(thin) (@guaranteed C) -> ()
  %lifetime2 = move_value [lexical] %lifetime : $C
  %escape = ref_to_unmanaged %lifetime2 : $C to $@sil_unmanaged C
  apply %useUnmanaged(%escape) : $@convention(thin) (@sil_unmanaged C) -> ()
  apply %borrow(%lifetime2) : $@convention(thin) (@guaranteed C) -> ()
  destroy_value %lifetime2 : $C
  %retval = tuple ()
  return %retval : $()
}

// Moves from values with non-owned ownership cannot be removed.  Without owned
// ownership, we can't determine whether the moved-from value has a pointer
// escape.
//
// CHECK-LABEL: sil [ossa] @f_none_optional : {{.*}} {
// CHECK:         [[INSTANCE:%[^,]+]] = enum $FakeOptional<C>, #FakeOptional.none!enumelt
// CHECK:         [[LIFETIME:%[^,]+]] = move_value [[INSTANCE]]
// CHECK-LABEL: } // end sil function 'f_none_optional'
sil [ossa] @f_none_optional : $@convention(thin) () -> () {
  %none = enum $FakeOptional<C>, #FakeOptional.none!enumelt
  %lifetime = move_value %none : $FakeOptional<C>
  destroy_value %lifetime : $FakeOptional<C>
  %retval = tuple ()
  return %retval : $()
}
